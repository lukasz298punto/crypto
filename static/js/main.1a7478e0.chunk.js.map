{"version":3,"sources":["utility/api.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiClient","axios","create","baseURL","process","headers","App","useQuery","a","get","isLoading","data","Loader","Message","type","showIcon","Math","round","price_usd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","refetchOnMount","refetchOnReconnect","retry","staleTime","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"iOAEaA,E,OAAYC,EAAMC,OAAO,CAClCC,QAASC,kCACTC,QAAS,CACL,gBAAiBD,0C,0BCoBVE,MAjBf,WAAgB,IAAD,IACiBC,mBAAS,kBAAD,sBAAoB,sBAAAC,EAAA,sEACvCR,EAAUS,IAAI,kBADyB,oFAAhDC,EADG,EACHA,UAAWC,EADR,EACQA,KAInB,OAAID,EACO,cAACE,EAAA,EAAD,IAIP,eAACC,EAAA,EAAD,CAASC,KAAK,UAAUC,UAAQ,EAAhC,mCAEKC,KAAKC,MAAL,OAAWN,QAAX,IAAWA,GAAX,UAAWA,EAAMA,YAAjB,aAAW,EAAa,GAAGO,YAAc,EAF9C,WCJOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFRQ,EAAc,IAAIC,cAAY,CAChCC,eAAgB,CACZC,QAAS,CACLC,sBAAsB,EACtBC,gBAAgB,EAChBC,oBAAoB,EACpBC,OAAO,EACPC,UAAW,QAKvBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,sBAAD,CAAqBC,OAAQZ,EAA7B,SACI,cAAC,EAAD,QAGRa,SAASC,eAAe,SAM5BvB,M","file":"static/js/main.1a7478e0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const apiClient = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL as string,\r\n    headers: {\r\n        \"X-CoinAPI-Key\": process.env.REACT_APP_API_KEY as string,\r\n    },\r\n});\r\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Message } from \"rsuite\";\nimport { apiClient } from \"utility/api\";\nimport { Loader } from \"rsuite\";\n\nimport \"rsuite/dist/rsuite.min.css\";\n\nfunction App() {\n    const { isLoading, data } = useQuery(\"query-tutorials\", async () => {\n        return await apiClient.get(\"/v1/assets/BTC\");\n    });\n\n    if (isLoading) {\n        return <Loader />;\n    }\n\n    return (\n        <Message type=\"warning\" showIcon>\n            Aktualny kurs BTC:{` `}\n            {Math.round(data?.data?.[0].price_usd) || 0} USD\n        </Message>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnWindowFocus: false,\n            refetchOnMount: false,\n            refetchOnReconnect: false,\n            retry: false,\n            staleTime: 5 * 60 * 1000,\n        },\n    },\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <QueryClientProvider client={queryClient}>\n            <App />\n        </QueryClientProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}